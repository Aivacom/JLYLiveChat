apply plugin: 'com.android.application'

android {
    compileSdkVersion "${compile_sdk_version}" as Integer
    defaultConfig {
        applicationId "rays.demo.livechat"
        minSdkVersion min_sdk_version
        targetSdkVersion target_sdk_version
        versionCode Integer.valueOf(System.env.BUILD_NUMBER ?: "1")
        versionName thunder_version + '_' + humer_version
        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters 'armeabi-v7a'
        }

        applicationVariants.all {
            variant -> changeApkName(variant)
        }
    }


    lintOptions {
        abortOnError false
    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    //noinspection GradleCompatible
    implementation "com.android.support:appcompat-v7:${appcompat_v7_version}"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:multidex:1.0.3'

    // core 模块用于提供消息通道等Hummer基础服务
    implementation "com.hummer.im:core:${humer_version}"
    implementation "com.google.protobuf:protobuf-java:3.0.0"
    implementation "com.yy.android.gslbsdk:gslb:1.0.40-intl"
    implementation "com.yy.platform:yyservicesdk:2.8.18"
    // chatroom模块用于聊天室服务
    implementation "com.hummer.im:chatroom:${humer_version}"



    //SDK内部依赖库
    implementation "com.yy.platform:yyservicesdk:3.2.+"

    //SDK第三方依赖库
    implementation "com.yy.android.gslbsdk:gslb:1.1.27-all"
    implementation 'com.aliyun.dpa:oss-android-sdk:+'
    implementation "com.google.protobuf:protobuf-java:3.0.0"
    implementation "com.yy.spidercrab:spidercrab:1.2.1"



    //ThunderBolt
//    implementation "com.yy.android.yylivesdk4cloud:yylivesdk4cloud-audiovideo:${yylivesdk4cloud_version}"
    implementation "com.rtc.thunder:thunderbolt:${thunder_version}"


    // FeedBack
    api "tv.athena:platform:${athena_version}"
    //    //core库，用于关联log库的api和impl
    implementation "tv.athena:core:${athena_version}"
    //    //开发时使用api库，便于解耦
    api "tv.athena:klog-api:${athena_version}"
    //    //实现库只在编译时添加
    runtimeOnly "tv.athena:klog:${athena_version}"
    api "tv.athena:crash-api:${athena_version}"
    implementation "tv.athena:crash:${athena_version}"
    api "tv.athena:filetransfer-api:${athena_version}"
    runtimeOnly "tv.athena:filetransfer:${athena_version}"
    api "tv.athena:http-api:${athena_version}"
    runtimeOnly "tv.athena:http:${athena_version}"
    api 'tv.athena:feedback-api:1.2.17'
    runtimeOnly 'tv.athena:feedback:1.2.17'

    implementation 'com.squareup.okhttp3:okhttp:3.12.1'
    implementation 'com.android.support:recyclerview-v7:28.0.0'

    //fastjson
    implementation "com.alibaba:fastjson:${fastjson}"
}

tasks.withType(JavaCompile) { options.encoding = "UTF-8" }
//File signFile = new File("${project.rootDir}/signing.properties")
File signFile = file(System.getenv('HOME') + "/.android/SCouldsign.properties")
if (signFile.canRead()) {
    Properties p = new Properties()
    p.load(new FileInputStream(signFile))
    if (p != null
            && p.containsKey('key.store')
            && p.containsKey('key.store.password')
            && p.containsKey('key.alias')
            && p.containsKey('key.alias.password')
    ) {
        println "RELEASE_BUILD: Signing..."
        android.signingConfigs.release.storeFile = file(p['key.store'])
        android.signingConfigs.release.storePassword = p['key.store.password']
        android.signingConfigs.release.keyAlias = p['key.alias']
        android.signingConfigs.release.keyPassword = p['key.alias.password']
    } else {
        println "RELEASE_BUILD: Required properties in signing.properties are missing"
        android.buildTypes.release.signingConfig = null
    }
} else {
    println "RELEASE_BUILD: signing.properties not found"
    android.buildTypes.release.signingConfig = null
}

tasks.whenTaskAdded { t ->
    if (t.name == 'assembleRelease') {
        println "assembleRelease: run collectApks collectProguard"
        assembleRelease.finalizedBy collectApks
//        collectApks.finalizedBy collectProguard
    }
}

def changeApkName(variant) {
    def apk = variant.outputs[0].outputFile
    def newName = ""
    newName = apk.name.replace(project.name, "sclouddemo" + "-" + android.defaultConfig.versionName + "-" + android.defaultConfig.versionCode + "-official")
    if (variant.buildType.name == "release") {
        newName = newName.replace("-" + variant.buildType.name, "")
    }

    //variant.outputs[0].outputFileName = new File(apk.parentFile, newName)
    variant.outputs.all {
        outputFileName = newName;
    }

    if (variant.outputs[0].zipAlign) {
        //    variant.outputs[0].zipAlign.outputFile = new File(apk.parentFile, newName.replace("-unaligned", ""))
        variant.outputs.all {
            outputFileName = newName.replace("-unaligned", "")
        }
    }
}

task collectApks() {
    doLast {
        println "Copies APKs and Proguard mappingsto the target directory"
        copy {
            from 'build/outputs/apk/release'
            exclude '**/*-unaligned.apk'
            into "${project.rootDir}/target"
        }
        copy {
            from 'build/outputs/mapping'
            into "${project.rootDir}/target/proguard"
        }
    }
}
